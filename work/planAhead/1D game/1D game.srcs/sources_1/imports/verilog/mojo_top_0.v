/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input [7:0] p1,
    input [7:0] p2,
    input reset_button,
    input start_button,
    output reg [15:0] grid_led,
    output reg [7:0] time_seg,
    output reg [7:0] moves_seg,
    output reg p1_wins,
    output reg p2_wins
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam IDLE_state = 2'd0;
  localparam START_state = 2'd1;
  localparam DISPLAY_RESULT_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  reg [15:0] M_led_mem_d, M_led_mem_q = 1'h0;
  reg [29:0] M_timer_d, M_timer_q = 1'h0;
  wire [16-1:0] M_sutd_generator_out;
  reg [1-1:0] M_sutd_generator_reset_button;
  sutd_generator_2 sutd_generator (
    .clk(clk),
    .rst(rst),
    .reset_button(M_sutd_generator_reset_button),
    .out(M_sutd_generator_out)
  );
  wire [16-1:0] M_random_led_generator_leds;
  reg [1-1:0] M_random_led_generator_randomize_trigger;
  random_led_generator_3 random_led_generator (
    .clk(clk),
    .rst(rst),
    .randomize_trigger(M_random_led_generator_randomize_trigger),
    .leds(M_random_led_generator_leds)
  );
  wire [8-1:0] M_time_left_segments;
  wire [1-1:0] M_time_left_times_up;
  reg [1-1:0] M_time_left_reset_time;
  time_left_4 time_left (
    .clk(clk),
    .rst(rst),
    .reset_time(M_time_left_reset_time),
    .segments(M_time_left_segments),
    .times_up(M_time_left_times_up)
  );
  wire [16-1:0] M_translate_moves_output_grid;
  reg [6-1:0] M_translate_moves_p1;
  reg [6-1:0] M_translate_moves_p2;
  reg [1-1:0] M_translate_moves_p1_hasmoved;
  reg [1-1:0] M_translate_moves_p2_hasmoved;
  reg [16-1:0] M_translate_moves_input_grid;
  translate_moves_5 translate_moves (
    .clk(clk),
    .rst(rst),
    .p1(M_translate_moves_p1),
    .p2(M_translate_moves_p2),
    .p1_hasmoved(M_translate_moves_p1_hasmoved),
    .p2_hasmoved(M_translate_moves_p2_hasmoved),
    .input_grid(M_translate_moves_input_grid),
    .output_grid(M_translate_moves_output_grid)
  );
  wire [8-1:0] M_moves_left_segments;
  wire [1-1:0] M_moves_left_last_move;
  reg [1-1:0] M_moves_left_reset_moves;
  reg [1-1:0] M_moves_left_new_move;
  moves_left_6 moves_left (
    .clk(clk),
    .reset_moves(M_moves_left_reset_moves),
    .new_move(M_moves_left_new_move),
    .segments(M_moves_left_segments),
    .last_move(M_moves_left_last_move)
  );
  
  wire [1-1:0] M_translate_winner_p1_wins;
  wire [1-1:0] M_translate_winner_p2_wins;
  reg [16-1:0] M_translate_winner_grid_led;
  translate_winner_7 translate_winner (
    .grid_led(M_translate_winner_grid_led),
    .p1_wins(M_translate_winner_p1_wins),
    .p2_wins(M_translate_winner_p2_wins)
  );
  
  wire [1-1:0] M_p1_hasmoved_ram_read_data;
  reg [1-1:0] M_p1_hasmoved_ram_clk;
  reg [0-1:0] M_p1_hasmoved_ram_address;
  reg [1-1:0] M_p1_hasmoved_ram_write_data;
  reg [1-1:0] M_p1_hasmoved_ram_write_en;
  simple_ram_8 #(.SIZE(1'h1), .DEPTH(1'h1)) p1_hasmoved_ram (
    .clk(M_p1_hasmoved_ram_clk),
    .address(M_p1_hasmoved_ram_address),
    .write_data(M_p1_hasmoved_ram_write_data),
    .write_en(M_p1_hasmoved_ram_write_en),
    .read_data(M_p1_hasmoved_ram_read_data)
  );
  
  wire [4-1:0] M_p1_last_move_ram_read_data;
  reg [1-1:0] M_p1_last_move_ram_clk;
  reg [0-1:0] M_p1_last_move_ram_address;
  reg [4-1:0] M_p1_last_move_ram_write_data;
  reg [1-1:0] M_p1_last_move_ram_write_en;
  simple_ram_9 #(.SIZE(3'h4), .DEPTH(1'h1)) p1_last_move_ram (
    .clk(M_p1_last_move_ram_clk),
    .address(M_p1_last_move_ram_address),
    .write_data(M_p1_last_move_ram_write_data),
    .write_en(M_p1_last_move_ram_write_en),
    .read_data(M_p1_last_move_ram_read_data)
  );
  
  wire [1-1:0] M_p2_hasmoved_ram_read_data;
  reg [1-1:0] M_p2_hasmoved_ram_clk;
  reg [0-1:0] M_p2_hasmoved_ram_address;
  reg [1-1:0] M_p2_hasmoved_ram_write_data;
  reg [1-1:0] M_p2_hasmoved_ram_write_en;
  simple_ram_8 #(.SIZE(1'h1), .DEPTH(1'h1)) p2_hasmoved_ram (
    .clk(M_p2_hasmoved_ram_clk),
    .address(M_p2_hasmoved_ram_address),
    .write_data(M_p2_hasmoved_ram_write_data),
    .write_en(M_p2_hasmoved_ram_write_en),
    .read_data(M_p2_hasmoved_ram_read_data)
  );
  
  wire [4-1:0] M_p2_last_move_ram_read_data;
  reg [1-1:0] M_p2_last_move_ram_clk;
  reg [0-1:0] M_p2_last_move_ram_address;
  reg [4-1:0] M_p2_last_move_ram_write_data;
  reg [1-1:0] M_p2_last_move_ram_write_en;
  simple_ram_9 #(.SIZE(3'h4), .DEPTH(1'h1)) p2_last_move_ram (
    .clk(M_p2_last_move_ram_clk),
    .address(M_p2_last_move_ram_address),
    .write_data(M_p2_last_move_ram_write_data),
    .write_en(M_p2_last_move_ram_write_en),
    .read_data(M_p2_last_move_ram_read_data)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_led_mem_d = M_led_mem_q;
    M_timer_d = M_timer_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_p1_hasmoved_ram_clk = clk;
    M_p1_last_move_ram_clk = clk;
    M_p2_hasmoved_ram_clk = clk;
    M_p2_last_move_ram_clk = clk;
    M_p1_hasmoved_ram_address = 1'h0;
    M_p1_last_move_ram_address = 1'h0;
    M_p2_hasmoved_ram_address = 1'h0;
    M_p2_last_move_ram_address = 1'h0;
    if ({p1[0+7-:8], p2[0+7-:8], reset_button, start_button} > 1'h0) begin
      M_random_led_generator_randomize_trigger = 1'h1;
    end else begin
      M_random_led_generator_randomize_trigger = 1'h0;
    end
    if (reset_button) begin
      M_sutd_generator_reset_button = 1'h1;
    end else begin
      M_sutd_generator_reset_button = 1'h0;
    end
    M_translate_moves_input_grid = M_led_mem_q;
    M_translate_moves_p1 = M_p1_last_move_ram_read_data;
    M_translate_moves_p2 = M_p2_last_move_ram_read_data;
    M_translate_moves_p1_hasmoved = M_p1_hasmoved_ram_read_data;
    M_translate_moves_p2_hasmoved = M_p2_hasmoved_ram_read_data;
    M_translate_winner_grid_led = M_led_mem_q;
    
    case (M_state_q)
      IDLE_state: begin
        grid_led = M_sutd_generator_out;
        time_seg = 8'h00;
        moves_seg = 8'h00;
        p1_wins = 1'h0;
        p2_wins = 1'h0;
        M_timer_d = 1'h0;
        M_moves_left_new_move = 1'h0;
        M_p1_last_move_ram_write_en = 1'h0;
        M_p1_last_move_ram_write_data = 4'h0;
        M_p1_hasmoved_ram_write_en = 1'h0;
        M_p1_hasmoved_ram_write_data = 1'h0;
        M_p2_last_move_ram_write_en = 1'h0;
        M_p2_last_move_ram_write_data = 4'h0;
        M_p2_hasmoved_ram_write_en = 1'h0;
        M_p2_hasmoved_ram_write_data = 1'h0;
        M_led_mem_d = M_random_led_generator_leds;
        M_time_left_reset_time = 1'h1;
        M_moves_left_reset_moves = 1'h1;
        if (start_button) begin
          M_state_d = START_state;
        end else begin
          M_state_d = IDLE_state;
        end
      end
      START_state: begin
        p1_wins = 1'h0;
        p2_wins = 1'h0;
        M_moves_left_reset_moves = 1'h0;
        M_timer_d = 1'h0;
        if (M_moves_left_last_move) begin
          M_state_d = DISPLAY_RESULT_state;
          M_time_left_reset_time = 1'h0;
          M_led_mem_d = M_led_mem_q;
          M_moves_left_new_move = 1'h0;
          M_p1_last_move_ram_write_en = 1'h0;
          M_p1_last_move_ram_write_data = 4'h0;
          M_p1_hasmoved_ram_write_en = 1'h0;
          M_p1_hasmoved_ram_write_data = 1'h0;
          M_p2_last_move_ram_write_en = 1'h0;
          M_p2_last_move_ram_write_data = 4'h0;
          M_p2_hasmoved_ram_write_en = 1'h0;
          M_p2_hasmoved_ram_write_data = 1'h0;
        end else begin
          if (reset_button == 1'h1) begin
            M_state_d = IDLE_state;
          end else begin
            M_state_d = START_state;
          end
          if (M_time_left_times_up) begin
            M_time_left_reset_time = 1'h1;
            M_led_mem_d = M_translate_moves_output_grid;
            M_moves_left_new_move = 1'h1;
            M_p1_last_move_ram_write_en = 1'h1;
            M_p1_last_move_ram_write_data = 4'h0;
            M_p1_hasmoved_ram_write_en = 1'h1;
            M_p1_hasmoved_ram_write_data = 1'h0;
            M_p2_last_move_ram_write_en = 1'h1;
            M_p2_last_move_ram_write_data = 4'h0;
            M_p2_hasmoved_ram_write_en = 1'h1;
            M_p2_hasmoved_ram_write_data = 1'h0;
          end else begin
            M_time_left_reset_time = 1'h0;
            M_led_mem_d = M_led_mem_q;
            M_moves_left_new_move = 1'h0;
            if (p1 == 8'h00) begin
              M_p1_last_move_ram_write_en = 1'h0;
              M_p1_last_move_ram_write_data = 4'h0;
              M_p1_hasmoved_ram_write_en = 1'h0;
              M_p1_hasmoved_ram_write_data = 4'h0;
            end else begin
              if (p1[0+0-:1]) begin
                M_p1_last_move_ram_write_en = 1'h1;
                M_p1_last_move_ram_write_data = 4'h0;
                M_p1_hasmoved_ram_write_en = 1'h1;
                M_p1_hasmoved_ram_write_data = 1'h1;
              end else begin
                if (p1[1+0-:1]) begin
                  M_p1_last_move_ram_write_en = 1'h1;
                  M_p1_last_move_ram_write_data = 4'h1;
                  M_p1_hasmoved_ram_write_en = 1'h1;
                  M_p1_hasmoved_ram_write_data = 1'h1;
                end else begin
                  if (p1[2+0-:1]) begin
                    M_p1_last_move_ram_write_en = 1'h1;
                    M_p1_last_move_ram_write_data = 4'h2;
                    M_p1_hasmoved_ram_write_en = 1'h1;
                    M_p1_hasmoved_ram_write_data = 1'h1;
                  end else begin
                    if (p1[3+0-:1]) begin
                      M_p1_last_move_ram_write_en = 1'h1;
                      M_p1_last_move_ram_write_data = 4'h3;
                      M_p1_hasmoved_ram_write_en = 1'h1;
                      M_p1_hasmoved_ram_write_data = 1'h1;
                    end else begin
                      if (p1[4+0-:1]) begin
                        M_p1_last_move_ram_write_en = 1'h1;
                        M_p1_last_move_ram_write_data = 4'h4;
                        M_p1_hasmoved_ram_write_en = 1'h1;
                        M_p1_hasmoved_ram_write_data = 1'h1;
                      end else begin
                        if (p1[5+0-:1]) begin
                          M_p1_last_move_ram_write_en = 1'h1;
                          M_p1_last_move_ram_write_data = 4'h5;
                          M_p1_hasmoved_ram_write_en = 1'h1;
                          M_p1_hasmoved_ram_write_data = 1'h1;
                        end else begin
                          if (p1[6+0-:1]) begin
                            M_p1_last_move_ram_write_en = 1'h1;
                            M_p1_last_move_ram_write_data = 4'h6;
                            M_p1_hasmoved_ram_write_en = 1'h1;
                            M_p1_hasmoved_ram_write_data = 1'h1;
                          end else begin
                            if (p1[7+0-:1]) begin
                              M_p1_last_move_ram_write_en = 1'h1;
                              M_p1_last_move_ram_write_data = 4'h7;
                              M_p1_hasmoved_ram_write_en = 1'h1;
                              M_p1_hasmoved_ram_write_data = 1'h1;
                            end else begin
                              M_p1_last_move_ram_write_en = 1'h0;
                              M_p1_last_move_ram_write_data = 4'h0;
                              M_p1_hasmoved_ram_write_en = 1'h0;
                              M_p1_hasmoved_ram_write_data = 1'h0;
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
            if (p2 == 8'h00) begin
              M_p2_last_move_ram_write_en = 1'h0;
              M_p2_last_move_ram_write_data = 4'h0;
              M_p2_hasmoved_ram_write_en = 1'h0;
              M_p2_hasmoved_ram_write_data = 4'h0;
            end else begin
              if (p2[0+0-:1]) begin
                M_p2_last_move_ram_write_en = 1'h1;
                M_p2_last_move_ram_write_data = 4'h0;
                M_p2_hasmoved_ram_write_en = 1'h1;
                M_p2_hasmoved_ram_write_data = 4'h1;
              end else begin
                if (p2[1+0-:1]) begin
                  M_p2_last_move_ram_write_en = 1'h1;
                  M_p2_last_move_ram_write_data = 4'h1;
                  M_p2_hasmoved_ram_write_en = 1'h1;
                  M_p2_hasmoved_ram_write_data = 4'h1;
                end else begin
                  if (p2[2+0-:1]) begin
                    M_p2_last_move_ram_write_en = 1'h1;
                    M_p2_last_move_ram_write_data = 4'h2;
                    M_p2_hasmoved_ram_write_en = 1'h1;
                    M_p2_hasmoved_ram_write_data = 4'h1;
                  end else begin
                    if (p2[3+0-:1]) begin
                      M_p2_last_move_ram_write_en = 1'h1;
                      M_p2_last_move_ram_write_data = 4'h3;
                      M_p2_hasmoved_ram_write_en = 1'h1;
                      M_p2_hasmoved_ram_write_data = 4'h1;
                    end else begin
                      if (p2[4+0-:1]) begin
                        M_p2_last_move_ram_write_en = 1'h1;
                        M_p2_last_move_ram_write_data = 4'h4;
                        M_p2_hasmoved_ram_write_en = 1'h1;
                        M_p2_hasmoved_ram_write_data = 4'h1;
                      end else begin
                        if (p2[5+0-:1]) begin
                          M_p2_last_move_ram_write_en = 1'h1;
                          M_p2_last_move_ram_write_data = 4'h5;
                          M_p2_hasmoved_ram_write_en = 1'h1;
                          M_p2_hasmoved_ram_write_data = 4'h1;
                        end else begin
                          if (p2[6+0-:1]) begin
                            M_p2_last_move_ram_write_en = 1'h1;
                            M_p2_last_move_ram_write_data = 4'h6;
                            M_p2_hasmoved_ram_write_en = 1'h1;
                            M_p2_hasmoved_ram_write_data = 4'h1;
                          end else begin
                            if (p2[7+0-:1]) begin
                              M_p2_last_move_ram_write_en = 1'h1;
                              M_p2_last_move_ram_write_data = 4'h7;
                              M_p2_hasmoved_ram_write_en = 1'h1;
                              M_p2_hasmoved_ram_write_data = 4'h1;
                            end else begin
                              M_p2_last_move_ram_write_en = 1'h0;
                              M_p2_last_move_ram_write_data = 4'h0;
                              M_p2_hasmoved_ram_write_en = 1'h0;
                              M_p2_hasmoved_ram_write_data = 4'h0;
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        time_seg = M_time_left_segments;
        moves_seg = M_moves_left_segments;
        grid_led = M_led_mem_q;
      end
      DISPLAY_RESULT_state: begin
        time_seg = M_moves_left_segments;
        moves_seg = M_moves_left_segments;
        M_led_mem_d = M_led_mem_q;
        M_p1_last_move_ram_write_en = 1'h0;
        M_p1_last_move_ram_write_data = 4'h0;
        M_p1_hasmoved_ram_write_en = 1'h0;
        M_p1_hasmoved_ram_write_data = 1'h0;
        M_p2_last_move_ram_write_en = 1'h0;
        M_p2_last_move_ram_write_data = 4'h0;
        M_p2_hasmoved_ram_write_en = 1'h0;
        M_p2_hasmoved_ram_write_data = 1'h0;
        M_time_left_reset_time = 1'h0;
        M_moves_left_reset_moves = 1'h0;
        M_moves_left_new_move = 1'h0;
        grid_led = M_led_mem_q;
        M_timer_d = M_timer_q + 1'h1;
        if (M_timer_q[26+0-:1]) begin
          p1_wins = M_translate_winner_p1_wins;
          p2_wins = M_translate_winner_p2_wins;
        end else begin
          p1_wins = 1'h0;
          p2_wins = 1'h0;
        end
        if (M_timer_q[27+2-:3] >= 3'h7) begin
          M_state_d = IDLE_state;
        end else begin
          if (reset_button == 1'h0) begin
            M_state_d = DISPLAY_RESULT_state;
          end else begin
            M_state_d = IDLE_state;
          end
        end
      end
      default: begin
        grid_led = 16'bxxxxxxxxxxxxxxxx;
        time_seg = 8'bxxxxxxxx;
        moves_seg = 8'bxxxxxxxx;
        p1_wins = 1'bx;
        p2_wins = 1'bx;
        M_timer_d = 1'h0;
        M_p1_last_move_ram_write_en = 1'h0;
        M_p1_last_move_ram_write_data = 4'h0;
        M_p1_hasmoved_ram_write_en = 1'h0;
        M_p1_hasmoved_ram_write_data = 1'h0;
        M_p2_last_move_ram_write_en = 1'h0;
        M_p2_last_move_ram_write_data = 4'h0;
        M_p2_hasmoved_ram_write_en = 1'h0;
        M_p2_hasmoved_ram_write_data = 1'h0;
        M_led_mem_d = 16'h0000;
        M_time_left_reset_time = 1'bx;
        M_moves_left_reset_moves = 1'bx;
        M_moves_left_new_move = 1'bx;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_led_mem_q <= 1'h0;
      M_timer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_led_mem_q <= M_led_mem_d;
      M_timer_q <= M_timer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
