/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module translate_moves_5 (
    input clk,
    input rst,
    input [5:0] p1,
    input [5:0] p2,
    input p1_hasmoved,
    input p2_hasmoved,
    input [15:0] input_grid,
    output reg [15:0] output_grid
  );
  
  
  
  reg [15:0] M_xor_grid_d, M_xor_grid_q = 1'h0;
  
  wire [8-1:0] M_aluA_out;
  reg [8-1:0] M_aluA_a;
  reg [8-1:0] M_aluA_b;
  reg [8-1:0] M_aluA_alufn;
  alu_13 aluA (
    .a(M_aluA_a),
    .b(M_aluA_b),
    .alufn(M_aluA_alufn),
    .out(M_aluA_out)
  );
  
  wire [8-1:0] M_aluB_out;
  reg [8-1:0] M_aluB_a;
  reg [8-1:0] M_aluB_b;
  reg [8-1:0] M_aluB_alufn;
  alu_13 aluB (
    .a(M_aluB_a),
    .b(M_aluB_b),
    .alufn(M_aluB_alufn),
    .out(M_aluB_out)
  );
  
  always @* begin
    M_xor_grid_d = M_xor_grid_q;
    
    M_xor_grid_d[0+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 1'h0 && 1'h0 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 1'h0))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 1'h0 && 1'h0 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 1'h0)));
    M_xor_grid_d[1+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 1'h1 && 1'h1 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 1'h1))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 1'h1 && 1'h1 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 1'h1)));
    M_xor_grid_d[2+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 2'h2 && 2'h2 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 2'h2))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 2'h2 && 2'h2 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 2'h2)));
    M_xor_grid_d[3+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 2'h3 && 2'h3 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 2'h3))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 2'h3 && 2'h3 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 2'h3)));
    M_xor_grid_d[4+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 3'h4 && 3'h4 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 1'h0))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 3'h4 && 3'h4 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 1'h0)));
    M_xor_grid_d[5+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 3'h5 && 3'h5 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 1'h1))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 3'h5 && 3'h5 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 1'h1)));
    M_xor_grid_d[6+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 3'h6 && 3'h6 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 2'h2))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 3'h6 && 3'h6 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 2'h2)));
    M_xor_grid_d[7+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 3'h7 && 3'h7 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 2'h3))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 3'h7 && 3'h7 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 2'h3)));
    M_xor_grid_d[8+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 4'h8 && 4'h8 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 1'h0))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 4'h8 && 4'h8 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 1'h0)));
    M_xor_grid_d[9+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 4'h9 && 4'h9 < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 1'h1))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 4'h9 && 4'h9 < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 1'h1)));
    M_xor_grid_d[10+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 4'ha && 4'ha < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 2'h2))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 4'ha && 4'ha < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 2'h2)));
    M_xor_grid_d[11+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 4'hb && 4'hb < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 2'h3))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 4'hb && 4'hb < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 2'h3)));
    M_xor_grid_d[12+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 4'hc && 4'hc < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 1'h0))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 4'hc && 4'hc < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 1'h0)));
    M_xor_grid_d[13+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 4'hd && 4'hd < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 1'h1))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 4'hd && 4'hd < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 1'h1)));
    M_xor_grid_d[14+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 4'he && 4'he < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 2'h2))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 4'he && 4'he < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 2'h2)));
    M_xor_grid_d[15+0-:1] = (p1_hasmoved && ((p1 * 3'h4 <= 4'hf && 4'hf < (p1 + 1'h1) * 3'h4) || (p1 > 2'h3 && p1[0+1-:2] == 2'h3))) ^ (p2_hasmoved && ((p2 * 3'h4 <= 4'hf && 4'hf < (p2 + 1'h1) * 3'h4) || (p2 > 2'h3 && p2[0+1-:2] == 2'h3)));
    M_aluA_a = M_xor_grid_q[0+7-:8];
    M_aluA_b = input_grid[0+7-:8];
    M_aluA_alufn = 6'h16;
    output_grid[0+7-:8] = M_aluA_out;
    M_aluB_a = M_xor_grid_q[8+7-:8];
    M_aluB_b = input_grid[8+7-:8];
    M_aluB_alufn = 6'h16;
    output_grid[8+7-:8] = M_aluB_out;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_xor_grid_q <= 1'h0;
    end else begin
      M_xor_grid_q <= M_xor_grid_d;
    end
  end
  
endmodule
