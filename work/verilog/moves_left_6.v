/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module moves_left_6 (
    input clk,
    input reset_moves,
    input new_move,
    output reg [7:0] segments,
    output reg last_move
  );
  
  
  
  wire [4-1:0] M_move_ram_read_data;
  reg [1-1:0] M_move_ram_clk;
  reg [0-1:0] M_move_ram_address;
  reg [4-1:0] M_move_ram_write_data;
  reg [1-1:0] M_move_ram_write_en;
  simple_ram_9 #(.SIZE(3'h4), .DEPTH(1'h1)) move_ram (
    .clk(M_move_ram_clk),
    .address(M_move_ram_address),
    .write_data(M_move_ram_write_data),
    .write_en(M_move_ram_write_en),
    .read_data(M_move_ram_read_data)
  );
  
  wire [8-1:0] M_bin_to_seg_out;
  reg [4-1:0] M_bin_to_seg_bin;
  bin_to_seg_12 bin_to_seg (
    .bin(M_bin_to_seg_bin),
    .out(M_bin_to_seg_out)
  );
  
  always @* begin
    M_move_ram_clk = clk;
    M_move_ram_address = 1'h0;
    if (new_move == 1'h1) begin
      M_move_ram_write_data = M_move_ram_read_data - 1'h1;
      M_move_ram_write_en = 1'h1;
    end else begin
      if (reset_moves == 1'h1) begin
        M_move_ram_write_data = 4'h9;
        M_move_ram_write_en = 1'h1;
      end else begin
        M_move_ram_write_data = 1'h0;
        M_move_ram_write_en = 1'h0;
      end
    end
    M_bin_to_seg_bin = M_move_ram_read_data;
    segments = M_bin_to_seg_out;
    if (M_move_ram_read_data == 1'h0) begin
      last_move = 1'h1;
    end else begin
      last_move = 1'h0;
    end
  end
endmodule
